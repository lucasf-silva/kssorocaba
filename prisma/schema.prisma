generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Cliente {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  nome              String?
  email             String?
  cpf               String?
  rg                String?
  celular           String?
  celularParente    String?
  estadoCivil       String?
  ocupacao          String?
  possuiVeiculo     Boolean   @default(false)
  placa             String?
  fumante           Boolean   @default(false)
  observacao        String?
  dataNascimento    DateTime
  dataCriacao       DateTime  @default(now())
  ultimaAtualizacao DateTime  @updatedAt
  anexos            Arquivo[]
}

model Arquivo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nomeArquivo String
  tipoArquivo String
  caminho     String
  tamanho     BigInt
  dataUpload  DateTime @default(now())

  clienteId String  @db.ObjectId
  cliente   Cliente @relation(fields: [clienteId], references: [id])
}
